/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.iohk.chain.node.Block', null, global);
goog.exportSymbol('proto.iohk.chain.node.BlockEvent', null, global);
goog.exportSymbol('proto.iohk.chain.node.BlockIds', null, global);
goog.exportSymbol('proto.iohk.chain.node.Fragment', null, global);
goog.exportSymbol('proto.iohk.chain.node.FragmentIds', null, global);
goog.exportSymbol('proto.iohk.chain.node.Gossip', null, global);
goog.exportSymbol('proto.iohk.chain.node.HandshakeRequest', null, global);
goog.exportSymbol('proto.iohk.chain.node.HandshakeResponse', null, global);
goog.exportSymbol('proto.iohk.chain.node.Header', null, global);
goog.exportSymbol('proto.iohk.chain.node.PullBlocksToTipRequest', null, global);
goog.exportSymbol('proto.iohk.chain.node.PullHeadersRequest', null, global);
goog.exportSymbol('proto.iohk.chain.node.PushHeadersResponse', null, global);
goog.exportSymbol('proto.iohk.chain.node.TipRequest', null, global);
goog.exportSymbol('proto.iohk.chain.node.TipResponse', null, global);
goog.exportSymbol('proto.iohk.chain.node.UploadBlocksResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.HandshakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.HandshakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.HandshakeRequest.displayName = 'proto.iohk.chain.node.HandshakeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.HandshakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.HandshakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.HandshakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.HandshakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.HandshakeRequest}
 */
proto.iohk.chain.node.HandshakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.HandshakeRequest;
  return proto.iohk.chain.node.HandshakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.HandshakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.HandshakeRequest}
 */
proto.iohk.chain.node.HandshakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.HandshakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.HandshakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.HandshakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.HandshakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.HandshakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.HandshakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.HandshakeResponse.displayName = 'proto.iohk.chain.node.HandshakeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.HandshakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.HandshakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.HandshakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block0: msg.getBlock0_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.HandshakeResponse}
 */
proto.iohk.chain.node.HandshakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.HandshakeResponse;
  return proto.iohk.chain.node.HandshakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.HandshakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.HandshakeResponse}
 */
proto.iohk.chain.node.HandshakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlock0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.HandshakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.HandshakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.HandshakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlock0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iohk.chain.node.HandshakeResponse.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes block0 = 2;
 * @return {string}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.getBlock0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block0 = 2;
 * This is a type-conversion wrapper around `getBlock0()`
 * @return {string}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.getBlock0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlock0()));
};


/**
 * optional bytes block0 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlock0()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.HandshakeResponse.prototype.getBlock0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlock0()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.HandshakeResponse.prototype.setBlock0 = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.TipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.TipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.TipRequest.displayName = 'proto.iohk.chain.node.TipRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.TipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.TipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.TipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.TipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.TipRequest}
 */
proto.iohk.chain.node.TipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.TipRequest;
  return proto.iohk.chain.node.TipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.TipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.TipRequest}
 */
proto.iohk.chain.node.TipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.TipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.TipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.TipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.TipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.TipResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.TipResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.TipResponse.displayName = 'proto.iohk.chain.node.TipResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.TipResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.TipResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.TipResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.TipResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeader: msg.getBlockHeader_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.TipResponse}
 */
proto.iohk.chain.node.TipResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.TipResponse;
  return proto.iohk.chain.node.TipResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.TipResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.TipResponse}
 */
proto.iohk.chain.node.TipResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.TipResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.TipResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.TipResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.TipResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes block_header = 1;
 * @return {string}
 */
proto.iohk.chain.node.TipResponse.prototype.getBlockHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_header = 1;
 * This is a type-conversion wrapper around `getBlockHeader()`
 * @return {string}
 */
proto.iohk.chain.node.TipResponse.prototype.getBlockHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHeader()));
};


/**
 * optional bytes block_header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHeader()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.TipResponse.prototype.getBlockHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHeader()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.TipResponse.prototype.setBlockHeader = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.BlockIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iohk.chain.node.BlockIds.repeatedFields_, null);
};
goog.inherits(proto.iohk.chain.node.BlockIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.BlockIds.displayName = 'proto.iohk.chain.node.BlockIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iohk.chain.node.BlockIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.BlockIds.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.BlockIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.BlockIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.BlockIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: msg.getIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.BlockIds}
 */
proto.iohk.chain.node.BlockIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.BlockIds;
  return proto.iohk.chain.node.BlockIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.BlockIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.BlockIds}
 */
proto.iohk.chain.node.BlockIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.BlockIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.BlockIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.BlockIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.BlockIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes ids = 1;
 * @return {!Array<string>}
 */
proto.iohk.chain.node.BlockIds.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes ids = 1;
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<string>}
 */
proto.iohk.chain.node.BlockIds.prototype.getIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIdsList()));
};


/**
 * repeated bytes ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iohk.chain.node.BlockIds.prototype.getIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iohk.chain.node.BlockIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iohk.chain.node.BlockIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.iohk.chain.node.BlockIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.FragmentIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iohk.chain.node.FragmentIds.repeatedFields_, null);
};
goog.inherits(proto.iohk.chain.node.FragmentIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.FragmentIds.displayName = 'proto.iohk.chain.node.FragmentIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iohk.chain.node.FragmentIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.FragmentIds.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.FragmentIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.FragmentIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.FragmentIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: msg.getIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.FragmentIds}
 */
proto.iohk.chain.node.FragmentIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.FragmentIds;
  return proto.iohk.chain.node.FragmentIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.FragmentIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.FragmentIds}
 */
proto.iohk.chain.node.FragmentIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.FragmentIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.FragmentIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.FragmentIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.FragmentIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes ids = 1;
 * @return {!Array<string>}
 */
proto.iohk.chain.node.FragmentIds.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes ids = 1;
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<string>}
 */
proto.iohk.chain.node.FragmentIds.prototype.getIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIdsList()));
};


/**
 * repeated bytes ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iohk.chain.node.FragmentIds.prototype.getIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iohk.chain.node.FragmentIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iohk.chain.node.FragmentIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.iohk.chain.node.FragmentIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.PullHeadersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iohk.chain.node.PullHeadersRequest.repeatedFields_, null);
};
goog.inherits(proto.iohk.chain.node.PullHeadersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.PullHeadersRequest.displayName = 'proto.iohk.chain.node.PullHeadersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iohk.chain.node.PullHeadersRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.PullHeadersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.PullHeadersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PullHeadersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromList: msg.getFromList_asB64(),
    to: msg.getTo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.PullHeadersRequest}
 */
proto.iohk.chain.node.PullHeadersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.PullHeadersRequest;
  return proto.iohk.chain.node.PullHeadersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.PullHeadersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.PullHeadersRequest}
 */
proto.iohk.chain.node.PullHeadersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addFrom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.PullHeadersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.PullHeadersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PullHeadersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes from = 1;
 * @return {!Array<string>}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getFromList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes from = 1;
 * This is a type-conversion wrapper around `getFromList()`
 * @return {!Array<string>}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getFromList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getFromList()));
};


/**
 * repeated bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getFromList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getFromList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iohk.chain.node.PullHeadersRequest.prototype.setFromList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.addFrom = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.iohk.chain.node.PullHeadersRequest.prototype.clearFromList = function() {
  this.setFromList([]);
};


/**
 * optional bytes to = 2;
 * @return {string}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes to = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.PullHeadersRequest.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.PullHeadersRequest.prototype.setTo = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.PullBlocksToTipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iohk.chain.node.PullBlocksToTipRequest.repeatedFields_, null);
};
goog.inherits(proto.iohk.chain.node.PullBlocksToTipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.PullBlocksToTipRequest.displayName = 'proto.iohk.chain.node.PullBlocksToTipRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iohk.chain.node.PullBlocksToTipRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.PullBlocksToTipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.PullBlocksToTipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PullBlocksToTipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromList: msg.getFromList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.PullBlocksToTipRequest}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.PullBlocksToTipRequest;
  return proto.iohk.chain.node.PullBlocksToTipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.PullBlocksToTipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.PullBlocksToTipRequest}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.PullBlocksToTipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.PullBlocksToTipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PullBlocksToTipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes from = 1;
 * @return {!Array<string>}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.getFromList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes from = 1;
 * This is a type-conversion wrapper around `getFromList()`
 * @return {!Array<string>}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.getFromList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getFromList()));
};


/**
 * repeated bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.getFromList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getFromList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.setFromList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iohk.chain.node.PullBlocksToTipRequest.prototype.addFrom = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.iohk.chain.node.PullBlocksToTipRequest.prototype.clearFromList = function() {
  this.setFromList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.PushHeadersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.PushHeadersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.PushHeadersResponse.displayName = 'proto.iohk.chain.node.PushHeadersResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.PushHeadersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.PushHeadersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.PushHeadersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PushHeadersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.PushHeadersResponse}
 */
proto.iohk.chain.node.PushHeadersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.PushHeadersResponse;
  return proto.iohk.chain.node.PushHeadersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.PushHeadersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.PushHeadersResponse}
 */
proto.iohk.chain.node.PushHeadersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.PushHeadersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.PushHeadersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.PushHeadersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.PushHeadersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.UploadBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.UploadBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.UploadBlocksResponse.displayName = 'proto.iohk.chain.node.UploadBlocksResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.UploadBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.UploadBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.UploadBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.UploadBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.UploadBlocksResponse}
 */
proto.iohk.chain.node.UploadBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.UploadBlocksResponse;
  return proto.iohk.chain.node.UploadBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.UploadBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.UploadBlocksResponse}
 */
proto.iohk.chain.node.UploadBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.UploadBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.UploadBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.UploadBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.UploadBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.Block.displayName = 'proto.iohk.chain.node.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.Block}
 */
proto.iohk.chain.node.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.Block;
  return proto.iohk.chain.node.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.Block}
 */
proto.iohk.chain.node.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {string}
 */
proto.iohk.chain.node.Block.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.iohk.chain.node.Block.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Block.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.Block.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.Header.displayName = 'proto.iohk.chain.node.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.Header}
 */
proto.iohk.chain.node.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.Header;
  return proto.iohk.chain.node.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.Header}
 */
proto.iohk.chain.node.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {string}
 */
proto.iohk.chain.node.Header.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.iohk.chain.node.Header.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Header.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.Header.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.Fragment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iohk.chain.node.Fragment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.Fragment.displayName = 'proto.iohk.chain.node.Fragment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.Fragment.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.Fragment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.Fragment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Fragment.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.Fragment}
 */
proto.iohk.chain.node.Fragment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.Fragment;
  return proto.iohk.chain.node.Fragment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.Fragment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.Fragment}
 */
proto.iohk.chain.node.Fragment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Fragment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.Fragment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.Fragment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Fragment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {string}
 */
proto.iohk.chain.node.Fragment.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.iohk.chain.node.Fragment.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Fragment.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.iohk.chain.node.Fragment.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.Gossip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iohk.chain.node.Gossip.repeatedFields_, null);
};
goog.inherits(proto.iohk.chain.node.Gossip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.Gossip.displayName = 'proto.iohk.chain.node.Gossip';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iohk.chain.node.Gossip.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.Gossip.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.Gossip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.Gossip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Gossip.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: msg.getNodesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.Gossip}
 */
proto.iohk.chain.node.Gossip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.Gossip;
  return proto.iohk.chain.node.Gossip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.Gossip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.Gossip}
 */
proto.iohk.chain.node.Gossip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.Gossip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.Gossip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.Gossip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.Gossip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes nodes = 2;
 * @return {!Array<string>}
 */
proto.iohk.chain.node.Gossip.prototype.getNodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes nodes = 2;
 * This is a type-conversion wrapper around `getNodesList()`
 * @return {!Array<string>}
 */
proto.iohk.chain.node.Gossip.prototype.getNodesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getNodesList()));
};


/**
 * repeated bytes nodes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iohk.chain.node.Gossip.prototype.getNodesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getNodesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iohk.chain.node.Gossip.prototype.setNodesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iohk.chain.node.Gossip.prototype.addNodes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.iohk.chain.node.Gossip.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iohk.chain.node.BlockEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iohk.chain.node.BlockEvent.oneofGroups_);
};
goog.inherits(proto.iohk.chain.node.BlockEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iohk.chain.node.BlockEvent.displayName = 'proto.iohk.chain.node.BlockEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iohk.chain.node.BlockEvent.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.iohk.chain.node.BlockEvent.ItemCase = {
  ITEM_NOT_SET: 0,
  ANNOUNCE: 1,
  SOLICIT: 2,
  MISSING: 3
};

/**
 * @return {proto.iohk.chain.node.BlockEvent.ItemCase}
 */
proto.iohk.chain.node.BlockEvent.prototype.getItemCase = function() {
  return /** @type {proto.iohk.chain.node.BlockEvent.ItemCase} */(jspb.Message.computeOneofCase(this, proto.iohk.chain.node.BlockEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iohk.chain.node.BlockEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.iohk.chain.node.BlockEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iohk.chain.node.BlockEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.BlockEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    announce: (f = msg.getAnnounce()) && proto.iohk.chain.node.Header.toObject(includeInstance, f),
    solicit: (f = msg.getSolicit()) && proto.iohk.chain.node.BlockIds.toObject(includeInstance, f),
    missing: (f = msg.getMissing()) && proto.iohk.chain.node.PullHeadersRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iohk.chain.node.BlockEvent}
 */
proto.iohk.chain.node.BlockEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iohk.chain.node.BlockEvent;
  return proto.iohk.chain.node.BlockEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iohk.chain.node.BlockEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iohk.chain.node.BlockEvent}
 */
proto.iohk.chain.node.BlockEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iohk.chain.node.Header;
      reader.readMessage(value,proto.iohk.chain.node.Header.deserializeBinaryFromReader);
      msg.setAnnounce(value);
      break;
    case 2:
      var value = new proto.iohk.chain.node.BlockIds;
      reader.readMessage(value,proto.iohk.chain.node.BlockIds.deserializeBinaryFromReader);
      msg.setSolicit(value);
      break;
    case 3:
      var value = new proto.iohk.chain.node.PullHeadersRequest;
      reader.readMessage(value,proto.iohk.chain.node.PullHeadersRequest.deserializeBinaryFromReader);
      msg.setMissing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iohk.chain.node.BlockEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iohk.chain.node.BlockEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iohk.chain.node.BlockEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iohk.chain.node.BlockEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnounce();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iohk.chain.node.Header.serializeBinaryToWriter
    );
  }
  f = message.getSolicit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.iohk.chain.node.BlockIds.serializeBinaryToWriter
    );
  }
  f = message.getMissing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.iohk.chain.node.PullHeadersRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header announce = 1;
 * @return {?proto.iohk.chain.node.Header}
 */
proto.iohk.chain.node.BlockEvent.prototype.getAnnounce = function() {
  return /** @type{?proto.iohk.chain.node.Header} */ (
    jspb.Message.getWrapperField(this, proto.iohk.chain.node.Header, 1));
};


/** @param {?proto.iohk.chain.node.Header|undefined} value */
proto.iohk.chain.node.BlockEvent.prototype.setAnnounce = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.iohk.chain.node.BlockEvent.oneofGroups_[0], value);
};


proto.iohk.chain.node.BlockEvent.prototype.clearAnnounce = function() {
  this.setAnnounce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iohk.chain.node.BlockEvent.prototype.hasAnnounce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockIds solicit = 2;
 * @return {?proto.iohk.chain.node.BlockIds}
 */
proto.iohk.chain.node.BlockEvent.prototype.getSolicit = function() {
  return /** @type{?proto.iohk.chain.node.BlockIds} */ (
    jspb.Message.getWrapperField(this, proto.iohk.chain.node.BlockIds, 2));
};


/** @param {?proto.iohk.chain.node.BlockIds|undefined} value */
proto.iohk.chain.node.BlockEvent.prototype.setSolicit = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.iohk.chain.node.BlockEvent.oneofGroups_[0], value);
};


proto.iohk.chain.node.BlockEvent.prototype.clearSolicit = function() {
  this.setSolicit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iohk.chain.node.BlockEvent.prototype.hasSolicit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PullHeadersRequest missing = 3;
 * @return {?proto.iohk.chain.node.PullHeadersRequest}
 */
proto.iohk.chain.node.BlockEvent.prototype.getMissing = function() {
  return /** @type{?proto.iohk.chain.node.PullHeadersRequest} */ (
    jspb.Message.getWrapperField(this, proto.iohk.chain.node.PullHeadersRequest, 3));
};


/** @param {?proto.iohk.chain.node.PullHeadersRequest|undefined} value */
proto.iohk.chain.node.BlockEvent.prototype.setMissing = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.iohk.chain.node.BlockEvent.oneofGroups_[0], value);
};


proto.iohk.chain.node.BlockEvent.prototype.clearMissing = function() {
  this.setMissing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iohk.chain.node.BlockEvent.prototype.hasMissing = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.iohk.chain.node);
